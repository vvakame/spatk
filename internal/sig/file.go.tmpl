{{- /* gotype: github.com/vvakame/spatk/internal/sig.PackageInfo */ -}}

// Code generated by sig {{ .CommandArguments }}; DO NOT EDIT

package {{ .PackageIdent }}

{{ if .ImportSpecs -}}
	import (
		{{- range $importSpec := .ImportSpecs }}
			{{ if ne $importSpec.Ident "" -}} {{ $importSpec.Ident }} {{- end }} "{{.Path}}"
		{{- end }}
	)
{{ end -}}

{{ define "struct" }}
{{- /* gotype: github.com/vvakame/spatk/internal/sig.StructInfo */ -}}
var {{ .VarPrefix }}{{ .TableName }} = {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}{
	name: "{{ .TableName }}",
	columns: []{{ .VarPrefix }}{{ .TableName }}{{ .ColumnTypeSuffix }}{
		{{- range $idx, $f := .EnabledFields }}
			{name: "{{$f.ColumnName}}"},
		{{- end}}
	},
}

type {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }} struct {
	name       string
	alias      string
	forceIndex string
	columns    []{{ .VarPrefix }}{{ .TableName }}{{ .ColumnTypeSuffix }}
}

type {{ .VarPrefix }}{{ .TableName }}{{ .ColumnTypeSuffix }} struct {
	name  string
	alias string
}

func (table {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}) {{ .TableNameMethod }}() string {
	tableName := table.name
	if table.forceIndex != "" {
		tableName = fmt.Sprintf("%s@{FORCE_INDEX=%s}", tableName, table.forceIndex)
	}
	if table.alias != "" {
		tableName = fmt.Sprintf("%s AS %s", tableName, table.alias)
	}
	return tableName
}

func (table {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}) As(aliasName string) {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }} {
	copied := table.copy()
	copied.alias = aliasName
	return copied
}

func (table {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}) ForceIndex(indexName string) {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }} {
	copied := table.copy()
	copied.forceIndex = indexName
	return copied
}

func (table {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}) {{ .ColumnNamesMethod }}() []string {
	return []string{
		{{- range $idx, $f := .EnabledFields }}
			table.{{$f.Name}}(),
		{{- end}}
	}
}

func (table {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }}) copy() {{ .VarPrefix }}{{ .TableName }}{{ .TableTypeSuffix }} {
	copied := table
	columns := make([]{{ .VarPrefix }}{{ .TableName }}{{ .ColumnTypeSuffix }}, len(table.columns))
	copy(columns, table.columns)
	copied.columns = columns
	return copied
}

{{- range $idx, $f := .EnabledFields}}
	func (table {{ $.VarPrefix }}{{ $.TableName }}{{ $.TableTypeSuffix }}) {{$f.Name}}() string {
		column := table.columns[{{ $idx }}]
		columnName := column.name
		if table.alias != "" {
			columnName = fmt.Sprintf("%s.%s", table.alias, columnName)
		}
		if column.alias != "" {
			return fmt.Sprintf("%s AS %s", columnName, column.alias)
		}
		return columnName
	}

	func (table {{ $.VarPrefix }}{{ $.TableName }}{{ $.TableTypeSuffix }}) {{$f.Name}}As(aliasName string) {{ $.VarPrefix }}{{ $.TableName }}{{ $.TableTypeSuffix }} {
		copied := table.copy()
		copied.columns[{{ $idx }}].alias = aliasName
		return copied
	}

	func (table {{ $.VarPrefix }}{{ $.TableName }}{{ $.TableTypeSuffix }}) {{$f.Name}}Cursor(order scur.Order) *scur.CursorParameter {
		return &scur.CursorParameter{
			Name:  table.{{$f.Name}}(),
			Order: order,
			{{ if ne $f.MinValueFunc "" -}}
				MinValue: {{$f.MinValueFunc}}(),
			{{ end -}}
			{{ if ne $f.MaxValueFunc "" -}}
				MaxValue: {{$f.MaxValueFunc}}(),
			{{ end -}}
			ToValue: func(obj any) any {
				v, ok := obj.(*{{ $.SimpleName }})
				if !ok || v == nil {
					panic(fmt.Sprintf("unexpected cursor object type: %T", obj))
				}
				return v.{{$f.Name}}
			},
		}
	}
{{ end }}
{{ end -}}

{{ range $st := .Structs -}}
	{{ template "struct" $st }}
{{ end -}}
