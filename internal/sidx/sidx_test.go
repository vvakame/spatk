package sidx_test

import (
	"context"
	"testing"

	"github.com/MakeNowJust/heredoc/v2"
	"github.com/vvakame/spatk/internal/sidx"
)

func TestBuild(t *testing.T) {
	tests := []struct {
		name    string
		cfg     *sidx.Config
		want    string
		wantErr bool
	}{
		{
			name: "basic",
			cfg: &sidx.Config{
				PackageIdent: "foo",
				DDL: heredoc.Doc(`
					CREATE UNIQUE NULL_FILTERED INDEX FooByFooID ON Foo(FooID);
				`),
				VarNamePrefix: "spannerIndex",
			},
			want: heredoc.Doc(`
				// generated by sidx; DO NOT EDIT
				package foo

				import "github.com/vvakame/spatk/sidx"

				var _ *sidx.Index = nil

				// spannerIndexFooByFooID contains index for Foo table.
				// "CREATE UNIQUE NULL_FILTERED INDEX FooByFooID ON Foo(FooID)".
				const spannerIndexFooByFooID = &sidx.Index{
					Name:         "FooByFooID",
					Table:        "Foo",
					SQL:          "CREATE UNIQUE NULL_FILTERED INDEX FooByFooID ON Foo(FooID)",
					Unique:       true,
					NullFiltered: true,
				}
				`),
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctx := context.Background()

			got, err := sidx.Build(ctx, tt.cfg)
			if (err != nil) != tt.wantErr {
				t.Errorf("Build() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if string(got) != tt.want {
				t.Errorf("Build() got = %v, want %v", string(got), tt.want)
			}
		})
	}
}
